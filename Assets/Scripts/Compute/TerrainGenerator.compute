#pragma kernel CSGenerator
#pragma kernel CSSurfaceGenerator

#include "/Includes/Volume.cginc"
#include "/Includes/Tables.cginc"
#include "/Includes/Simplex.cginc"
#include "/Includes/Functions.cginc"

//#define CLOSE_FIELD


int3 chunkOffset;

float3 noiseOffset;
float3 noiseScale;

float derivativeStep;

float surfaceLevel;
float surfaceScale;
float surfaceMagnitude;

float caveScale;

uint lodSize;
uint lodChunksPerAxis;
uint lodRes;


float3 rot(float3 coord, float4x4 mat)
{
	return float3(dot(mat._11_12_13, coord),	// 3x3 transform,
				  dot(mat._21_22_23, coord),	// no translation
				  dot(mat._31_32_33, coord));
}

float uSNoise(in float2 p)
{
	return (1.0 + snoise(p)) / 2.0;
}

float surface(in float3 p)
{
	float surf = p.y - surfaceLevel;
	surf -= uSNoise(p.xz * surfaceScale * 1.000) * surfaceMagnitude;
	surf -= uSNoise(p.xz * surfaceScale * 1.960) * surfaceMagnitude / 2.13;
	surf -= uSNoise(p.xz * surfaceScale * 4.130) * surfaceMagnitude / 3.96;
	surf -= uSNoise(p.xz * surfaceScale * 7.980) * surfaceMagnitude / 8.11;
	surf -= uSNoise(p.xz * surfaceScale * 16.15) * surfaceMagnitude / 15.96;

	return surf;
}

float density(in float3 p)
{

	float d = surface(p);

	float cube = sdRoundBox(p, float3(15, 15, 10), 2.0);
	float torus = sdTorus(p, float2(50, 5));
	float cyl = sdCappedCylinder(p, 25, 25);

	float a = smin(d, cube, 10).x;
	float b = smin(a, torus, 10).x;
	float c = smin(b, cyl, 10).x;

	return c;

}

float3 calcNormal(in float3 p)
{
	const float h = derivativeStep; // 0.0001
	const float2 k = float2(1, -1);
	return normalize(
		k.xyy * density(p + k.xyy * h) +
		k.yyx * density(p + k.yyx * h) +
		k.yxy * density(p + k.yxy * h) +
		k.xxx * density(p + k.xxx * h));
}

// Slightly more expensive but arguably better
float3 calcNormal2(float3 p) {
	return normalize(float3(
		density(float3(p.x + derivativeStep, p.y, p.z)) - density(float3(p.x - derivativeStep, p.y, p.z)),
		density(float3(p.x, p.y + derivativeStep, p.z)) - density(float3(p.x, p.y - derivativeStep, p.z)),
		density(float3(p.x, p.y, p.z + derivativeStep)) - density(float3(p.x, p.y, p.z - derivativeStep))
	));
}

[numthreads(8,8,1)]
void CSGenerator(uint3 id : SV_DispatchThreadID)
{
	uint index = getVolumeIndex(id);

	// Polygonized chunks are smaller than volume field
	uint3 isoAdjustedSize = isoSize - uint3(2, 2, 2);

	float3 pos = float3(id) + float3(isoAdjustedSize) * chunkOffset;
	float3 noisePos = (pos + noiseOffset) * noiseScale;

	float d = density(noisePos);
	float3 n = calcNormal(noisePos);

	isoDists[index] = d;
	isoNormals[index] = n;
}

[numthreads(8, 8, 1)]
void CSSurfaceGenerator(uint3 id : SV_DispatchThreadID)
{

	// Polygonized chunks are smaller than volume field
	uint3 isoAdjustedSize = isoSize - uint3(2, 2, 2);

	// Offset heightmap by half its resolution (because player is in center)
	float3 lodOffset = float3(lodRes / 2, 0, lodRes / 2); 

	// Create a chunk offset position from thread ID
	float3 pos = float3(id.x, 0, id.y) + float3(isoAdjustedSize) * chunkOffset;

	// Put all offsets together
	float3 offsetPos = (pos + noiseOffset - lodOffset);

	// Step with larger noise values because lod terrain is bigger than a single chunk
	offsetPos *= lodChunksPerAxis;
	offsetPos *= noiseScale;

	int idx = id.x + lodRes * id.y;

	isoDists[idx] = abs(surface(offsetPos)) / (surfaceMagnitude * 2);
}
