#pragma kernel CSGenerator

#include "/Includes/Volume.cginc"
#include "/Includes/Tables.cginc"
#include "/Includes/Simplex.cginc"
#include "/Includes/Functions.cginc"

//#define CLOSE_FIELD


float3 chunkOffset;
float3 noiseOffset;
float3 noiseScale;

float derivativeStep;

float surfaceLevel;
float surfaceScale;
float surfaceMagnitude;

float warpScale;
float warpMagnitude;

uint lodSize;
uint lodChunksPerAxis;
uint lodRes;

float4x4 octaveMat0;
float4x4 octaveMat1;
float4x4 octaveMat2;
float4x4 octaveMat3;

struct csg
{
	int type;
	int operation;
	float3 position;
	float radius;
};

RWStructuredBuffer<csg> operations;
uint opCount;

float3 rot(float3 coord, float4x4 mat)
{
	return float3(dot(mat._11_12_13, coord),	// 3x3 transform,
				  dot(mat._21_22_23, coord),	// no translation
				  dot(mat._31_32_33, coord));
}

float usnoise(in float2 p)
{
	return (1.0 + snoise(p)) / 2.0;
}

float usnoise(in float3 p)
{
	return (1.0 + snoise(p)) / 2.0;
}

float3 snoise3(in float3 v)
{
	return float3 (
		snoise(v),
		snoise(v + 17.0),
		snoise(v - 43.0)
	);
}

float surface(in float3 p)
{
	float surf = surfaceLevel - p.y;

	float3 warp = snoise3(p * warpScale);
	float3 wp = p + warp * warpMagnitude;

	float3 c0 = rot(wp, octaveMat0);
	float3 c1 = rot(wp, octaveMat1);
	float3 c2 = rot(wp, octaveMat2);
	float3 c3 = rot(wp, octaveMat3);

	//float continent = saturate(1 - length(p - float3(0, 0, 0)) / 4096);
	float continent = usnoise(wp * 0.0005);

	surf += usnoise(wp * surfaceScale * 1.0000) * (surfaceMagnitude * continent);
	surf += usnoise(wp * surfaceScale * 2.1110) * (surfaceMagnitude * continent) / 2;
	surf += usnoise(wp * surfaceScale * 4.1300) * (surfaceMagnitude * continent) / 4;
	surf += usnoise(wp * surfaceScale * 7.9800) * (surfaceMagnitude * continent) / 8;
	surf += usnoise(wp * surfaceScale * 16.960) * surfaceMagnitude / 16;
	surf += usnoise(wp * surfaceScale * 32.150) * surfaceMagnitude / 32;
	surf += usnoise(c0 * surfaceScale * 64.130) * surfaceMagnitude / 64;
	surf += usnoise(c1 * surfaceScale * 128.11) * surfaceMagnitude / 128;
	surf += usnoise(c2 * surfaceScale * 256.15) * surfaceMagnitude / 256;
	surf += usnoise(c3 * surfaceScale * 512.13) * surfaceMagnitude / 512;

	return surf;
}

float density(in float3 p)
{

	float s = -surface(p);

	float cube = sdRoundBox(p, float3(15, 15, 10), 2.0);
	float torus = sdTorus(p, float2(50, 5));
	float cyl = sdCappedCylinder(p, 25, 25);
	float pyramid = sdOctahedronExact(p - float3(-512, 100, 512), 256);
	float faraosGravkammare = sdOctahedronExact(p - float3(-512, 100, 512), 128);

	pyramid = opSubtraction(faraosGravkammare, pyramid);

	float a = smin(s, cube, 10).x;
	float b = smin(a, torus, 10).x;
	float c = smin(b, cyl, 10).x;
	float d = smin(c, pyramid, 10).x;

	float res = d;
	//for (int i = 0; i < opCount; i++)
	//{
	//	csg op = operations[i];
	//	res = op.operation == 0 ? opUnion(res, sdSphere(p + op.position, op.radius))
	//
	//}

	return res;

}

float3 calcNormal(in float3 p)
{
	const float h = derivativeStep * isoScale; // 0.0001
	const float2 k = float2(1, -1);
	return normalize(
		k.xyy * density(p + k.xyy * h) +
		k.yyx * density(p + k.yyx * h) +
		k.yxy * density(p + k.yxy * h) +
		k.xxx * density(p + k.xxx * h));
}

// Slightly more expensive but arguably better
float3 calcNormal2(float3 p) {
	return normalize(float3(
		density(float3(p.x + derivativeStep, p.y, p.z)) - density(float3(p.x - derivativeStep, p.y, p.z)),
		density(float3(p.x, p.y + derivativeStep, p.z)) - density(float3(p.x, p.y - derivativeStep, p.z)),
		density(float3(p.x, p.y, p.z + derivativeStep)) - density(float3(p.x, p.y, p.z - derivativeStep))
	));
}

[numthreads(8,8,1)]
void CSGenerator(uint3 id : SV_DispatchThreadID)
{
	uint index = getVolumeIndex(id);

	// Polygonized chunks are smaller than volume field
	uint3 isoAdjustedSize = isoSize - uint3(2, 2, 2);

	float3 pos = chunkOffset + float3(id) * isoScale;
	float3 noisePos = (pos + noiseOffset) * noiseScale;

	float d = density(noisePos) / isoScale;
	float3 n = calcNormal(noisePos);

	isoDists[index] = d;
	isoNormals[index] = n;
}
