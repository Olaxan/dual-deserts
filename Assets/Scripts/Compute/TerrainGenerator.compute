#pragma kernel CSGenerator

#include "/Includes/Volume.cginc"
#include "/Includes/Tables.cginc"
#include "/Includes/Simplex.cginc"
#include "/Includes/Functions.cginc"

//#define CLOSE_FIELD

int3 chunkOffset;

float3 noiseOffset;
float3 noiseScale;

float derivativeStep;

float surfaceLevel;
float surfaceScale;
float surfaceMagnitude;
float surfaceDistanceMult;

float caveScale;
float caveDistanceMult;

float3 rot(float3 coord, float4x4 mat)
{
	return float3(dot(mat._11_12_13, coord),	// 3x3 transform,
				  dot(mat._21_22_23, coord),	// no translation
				  dot(mat._31_32_33, coord));
}

float density(in float3 p)
{

	float surf = p.y;
	surf += snoise(p.xz * surfaceScale) * surfaceMagnitude;
	surf += snoise(p.xz * surfaceScale * 1.96) * surfaceMagnitude / 2.13;
	surf += snoise(p.xz * surfaceScale * 4.13) * surfaceMagnitude / 3.96;
	surf += snoise(p.xz * surfaceScale * 7.98) * surfaceMagnitude / 8.11;
	surf += snoise(p.xz * surfaceScale * 16.11) * surfaceMagnitude / 15.96;

	float cube = sdRoundBox(p, float3(15, 15, 10), 2.0);
	float torus = sdTorus(p, float2(50, 5));
	float cyl = sdCappedCylinder(p, 25, 25);

	float a = smin(surf, cube, 10).x;
	float b = smin(a, torus, 10).x;
	float c = smin(b, cyl, 10).x;

	return c;

}

float3 calcNormal(in float3 p)
{
	const float h = derivativeStep; // 0.0001
	const float2 k = float2(1, -1);
	return normalize(
		k.xyy * density(p + k.xyy * h) +
		k.yyx * density(p + k.yyx * h) +
		k.yxy * density(p + k.yxy * h) +
		k.xxx * density(p + k.xxx * h));
}

// Slightly more expensive but arguably better
float3 calcNormal2(float3 p) {
	return normalize(float3(
		density(float3(p.x + derivativeStep, p.y, p.z)) - density(float3(p.x - derivativeStep, p.y, p.z)),
		density(float3(p.x, p.y + derivativeStep, p.z)) - density(float3(p.x, p.y - derivativeStep, p.z)),
		density(float3(p.x, p.y, p.z + derivativeStep)) - density(float3(p.x, p.y, p.z - derivativeStep))
	));
}

[numthreads(8,8,1)]
void CSGenerator(uint3 id : SV_DispatchThreadID)
{
	int index = getVolumeIndex(id);
	int3 pos = int3(id) + chunkOffset * (int3(isoSize) - int3(2, 2, 2));
	float3 noisePos = (float3(pos) + noiseOffset) * noiseScale;

	IsoPoint p;

	p.dist = density(noisePos);
	p.normal = calcNormal2(noisePos);

	#ifdef CLOSE_FIELD
	if (p.dist <= 0)
	{
		if (id.x == 0)
		{
			p.dist = 0.5;
			p.normal = -axes[0];
		}
		else if (id.y == 0)
		{
			p.dist = 0.5;
			p.normal = -axes[1];
		}
		else if (id.z == 0)
		{
			p.dist = 0.5;
			p.normal = -axes[2];
		}
		else if (id.x == isoSize.x - 2)
		{
			p.dist = 0.5;
			p.normal = axes[0];
		}
		else if (id.y == isoSize.y - 2)
		{
			p.dist = 0.5;
			p.normal = axes[1];
		}
		else if (id.z == isoSize.z - 2)
		{
			p.dist = 0.5;
			p.normal = axes[2];
		}
	}
	#endif

	iso[index] = p;
}
