#pragma kernel CSGenerator

#include "/Includes/Volume.cginc"
#include "/Includes/Tables.cginc"
#include "/Includes/Simplex.cginc"

//#define CLOSE_FIELD

static uint2 oa[3] = 
{
	uint2(1,2),
	uint2(0,2),
	uint2(0,1)
};

float3 noiseOffset;
float3 noiseScale;

float surfaceLevel;
float surfaceScale;
float surfaceMagnitude;
float surfaceDistanceMult;

float caveScale;
float caveDistanceMult;

float density(in float3 p)
{
	float a = (p.y - surfaceLevel + snoise(p.xz * surfaceScale) * surfaceMagnitude) * surfaceDistanceMult;
	float b = snoise(p * caveScale) * caveDistanceMult;

	return max(a, b);
}

// for function f(p)
float3 calculateNormal(in float3 p)
{
	const float h = 0.0001; // replace by an appropriate value
	const float2 k = float2(1, -1);
	return normalize(
		k.xyy * density(p + k.xyy * h) +
		k.yyx * density(p + k.yyx * h) +
		k.yxy * density(p + k.yxy * h) +
		k.xxx * density(p + k.xxx * h));
}

[numthreads(8,8,1)]
void CSGenerator(uint3 id : SV_DispatchThreadID)
{
	int index = getVolumeIndex(id);
	float3 noisePos = (float3(id) + noiseOffset) * noiseScale;

	IsoPoint p;

	p.dist = density(noisePos);
	p.normal = calculateNormal(noisePos);

	#ifdef CLOSE_FIELD
	if (p.dist <= 0)
	{
		if (id.x == 0)
		{
			p.dist = 0.5;
			p.normal = -axes[0];
		}
		else if (id.y == 0)
		{
			p.dist = 0.5;
			p.normal = -axes[1];
		}
		else if (id.z == 0)
		{
			p.dist = 0.5;
			p.normal = -axes[2];
		}
		else if (id.x == isoSize.x - 2)
		{
			p.dist = 0.5;
			p.normal = axes[0];
		}
		else if (id.y == isoSize.y - 2)
		{
			p.dist = 0.5;
			p.normal = axes[1];
		}
		else if (id.z == isoSize.z - 2)
		{
			p.dist = 0.5;
			p.normal = axes[2];
		}
	}
	#endif

	//p.dist = float(id.y) - floorLevel;
	//p.normal = float3(0, sign(p.dist), 0);

	iso[index] = p;
}
