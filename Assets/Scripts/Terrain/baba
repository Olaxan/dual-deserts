// SHADER

#pragma kernel CSMain

RWStructuredBuffer<int> numbers;

uint3 size;

int getIndex(uint3 id)
{
	((id.z) ...
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_...)
{
	int i = getIndex(id);	

	numbers[i] = i;
}




// CPU

public ComputeShader shader;
public Vector3Int size;

int mainKernel;
int x, y, z;

private ComputeBuffer buf;

void Start()
{
	buf = new ComputeBuffer(size * size * size, sizeof(int));

	shader.FindKernel(mainKernel, "CSMain");
	shader.FindThreadGroupSize(mainKernel, out x, out y, out z);

	shader.SetBuffer(buf, "numbers");

	shader.Dispatch(mainKernel, size / x, size / y, size / z);

	int[] numbers = new int[size * size * size];
	buf.GetData(numbers);

}
